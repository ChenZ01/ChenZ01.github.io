<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Codeforces Global Round 23</title>
    <link href="/2022/10/22/Codeforces-Global-Round-23/"/>
    <url>/2022/10/22/Codeforces-Global-Round-23/</url>
    
    <content type="html"><![CDATA[<p>Codeforces 下分计划 绝赞进行中</p><span id="more"></span><h1 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h1><p><a href="https://codeforces.com/contest/1746">Codeforces Global Round 23</a></p><h1 id="A-Maxmina"><a href="#A-Maxmina" class="headerlink" title="A - Maxmina"></a>A - Maxmina</h1><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>构造</p><p>全 $0$ 则结论平凡 <del>你在哪学的这种数学教材风啊</del></p><p>若有一个 $1$，则一定可以通过不断执行操作 1，将 $n$ 个数减少到 $k$ 个。最后执行操作 2 即可</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><p><a href="https://codeforces.com/contest/1746/submission/176683270">1746 A</a></p><h1 id="B-Rebellion"><a href="#B-Rebellion" class="headerlink" title="B - Rebellion"></a>B - Rebellion</h1><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>贪心</p><p>最后一定会成为 $0..01…1$，我们只需要将最后的 $0$ 与最前的 $1$ 不断对调即可</p><h2 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h2><p><a href="https://codeforces.com/contest/1746/submission/176763960">1746 B</a></p><h1 id="C-Permutation-Operations"><a href="#C-Permutation-Operations" class="headerlink" title="C - Permutation Operations"></a>C - Permutation Operations</h1><h2 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h2><p>差分，构造</p><p>区间修改、对于单调性的判断一定要往差分上面多想想 <del>别老惦记着你那 BIT   逆序对了</del></p><p>令 $d_i &#x3D; a_{i + 1} - a_i$</p><p>改造成递增序列意味着 $d_i$ 均非负，后缀 $[i, n]$ 全部增加 $x$ 意味着 $d_{i - 1}$ 加上 $x$ 且 $\lbrace d\rbrace$ 中其余元素不变</p><p>因此注意到，我们第 $i$ 次的操作就是给 $\lbrace d\rbrace$ 中 $n - 1$ 个元素中的某一个加上 $i$，由于 $\lbrace a\rbrace$ 是 $n$ 排列，最极端情况下 $\lbrace d\rbrace$ 是 $n - 1$ 排列，因此我们一定能构造出这样的一组解：</p><p>对于 $a_i$，有 $d_{i - 1} &#x3D; a_i - a_{i - 1} &gt; a_{i - 1}$，故在 $[i, n]$ 后缀加上 $a_{i - 1}$ 即可使得 $d_{i - 1} &gt; 0$</p><h2 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h2><p><a href="https://codeforces.com/contest/1746/submission/177013198">1746 C</a></p><h1 id="D-Paths-on-the-Tree"><a href="#D-Paths-on-the-Tree" class="headerlink" title="D - Paths on the Tree"></a>D - Paths on the Tree</h1><h2 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution"></a>Solution</h2><p>树形 DP</p><p>由题意，一个具有 $s$ 个儿子、能够提供 $p$ 条 path 的结点，每个儿子分配到的 path 应该有 $\lfloor\dfrac{p}{s}\rfloor$ 或 $\lfloor\dfrac{p}{s}\rfloor + 1$ 条</p><p>考虑令 $f(u, p)$ 表示以 $u$ 为父结点的树、分配 $p$ 条 path 能获得的最大值，DP 即可</p><p>奇怪的是，我脑抽觉得一个 $(u, p)$ 只可能访问一次，没有返回记忆化的值。这种想当然的错误已经在 ICPC 里面犯过一次了（那次是觉得答案不可能超，没取模）</p><h2 id="Code-3"><a href="#Code-3" class="headerlink" title="Code"></a>Code</h2><p><a href="https://codeforces.com/contest/1746/submission/177467112">1746 D</a></p>]]></content>
    
    
    <categories>
      
      <category>ICPC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Constructive Algorithms</tag>
      
      <tag>Greedy</tag>
      
      <tag>Two Pointers</tag>
      
      <tag>DP</tag>
      
      <tag>Tree</tag>
      
      <tag>Implementation</tag>
      
      <tag>Difference</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GSS1</title>
    <link href="/2022/08/23/GSS1/"/>
    <url>/2022/08/23/GSS1/</url>
    
    <content type="html"><![CDATA[<p>GSS 系列本来在换电脑前就打算完成的，但由于当时我本人也是一知半解，没有底气与实力写 blog，遂弃置至今</p><span id="more"></span><p>考上 ZJU后，重新开始的 blog 以此为开头，也算是有些许意义</p><h1 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h1><p><a href="https://www.spoj.com/problems/GSS1/">SPOJ GSS1</a></p><h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>给定长度为 $n$ 的序列，回答 $m$ 个询问 $[x, y]$，要求出 $[x, y]$ 的最大子串和</p><p>这里用了<strong>子串</strong>来与<strong>子序列</strong>进行区分</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><p>区间查询，考虑线段树 <del>据说可以用猫树做，但我不会，咕了</del><br>因而我们应该考虑如何将 father 线段上的问题分割给两个 son 线段来处理</p><p>考察符合要求的子串 $[l, r]$ 在 father 区间 $[L, R]$ 的位置，只有以下三种情况</p><ul><li>$[l, r]$ 在 $[L, R]$ 左半边</li><li>$[l, r]$ 在 $[L, R]$ 右半边</li><li>$[l, r]$ 跨过 $[L, R]$ 中间</li></ul><p>三种情况取 max 即可，接下来便考虑如何计算这三种情况的答案</p><h3 id="左右半边"><a href="#左右半边" class="headerlink" title="左右半边"></a>左右半边</h3><p>直接返回 lson &#x2F; rson 的 max 即可，相当于规模减半的子问题</p><h3 id="跨中间"><a href="#跨中间" class="headerlink" title="跨中间"></a>跨中间</h3><p>答案为左区间后缀和最大值（可能取最大值时子串长度为0） + 右区间前缀和最大值（同理可能不选右区间元素）</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>线段树的 node 需要维护前缀和、后缀和、子串和最大值，不难发现还需要维护区间所有值的和，易在 <code>pushUp()</code> 中维护</p><p>这样我们有了一份很朴实的 <code>query()</code> 想法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pushUp</span><span class="hljs-params">(<span class="hljs-type">int</span> rt)</span></span><br><span class="hljs-function"></span>&#123;<br>    S[rt] = S[rt &lt;&lt; <span class="hljs-number">1</span>] + S[rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>];<br>    L[rt] = <span class="hljs-built_in">max</span>(L[rt &lt;&lt; <span class="hljs-number">1</span>], S[rt &lt;&lt; <span class="hljs-number">1</span>] + L[rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>]);<br>    R[rt] = <span class="hljs-built_in">max</span>(R[rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>], S[rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>] + R[rt &lt;&lt; <span class="hljs-number">1</span>]);<br>    M[rt] = <span class="hljs-built_in">max</span>(M[rt &lt;&lt; <span class="hljs-number">1</span>], <span class="hljs-built_in">max</span>(M[rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>], R[rt &lt;&lt; <span class="hljs-number">1</span>] + L[rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>]));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> rt, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> m = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (m &gt;= qr)<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">query</span>(rt &lt;&lt; <span class="hljs-number">1</span>, l, m);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (m &lt; ql)<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">query</span>(rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, m + <span class="hljs-number">1</span>, r);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (l &gt;= ql &amp;&amp; r &lt;= qr)<br>        <span class="hljs-keyword">return</span> M[rt];<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(<span class="hljs-built_in">query</span>(rt &lt;&lt; <span class="hljs-number">1</span>, l, m), <span class="hljs-built_in">max</span>(<span class="hljs-built_in">query</span>(rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, m + <span class="hljs-number">1</span>, r), R[rt &lt;&lt; <span class="hljs-number">1</span>] + L[rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>]));<br>&#125;<br></code></pre></td></tr></table></figure><p>然后就在 master test 中 T 了……</p><h3 id="Optimize"><a href="#Optimize" class="headerlink" title="Optimize"></a>Optimize</h3><p>显然我们这个 <code>query()</code> 写的太暴力了，考虑优化掉一些</p><p>考虑到线段树统计答案的顺序，一定是 lson -&gt; rson -&gt; father，这使得 lson 的后缀和最大值可以被 father 计算时利用，改造一下 <code>query()</code> 即可</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">read</span><span class="hljs-params">(T&amp; x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">char</span> c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-type">int</span> neg = <span class="hljs-number">0</span>;<br>    x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = <span class="hljs-built_in">getchar</span>())<br>        neg |= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = <span class="hljs-built_in">getchar</span>())<br>        x = x * <span class="hljs-number">10</span> + (c - <span class="hljs-string">&#x27;0&#x27;</span>);<br>    <span class="hljs-keyword">if</span> (neg)<br>        x = -x;<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function">T <span class="hljs-title">max</span><span class="hljs-params">(T x, T y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (x &gt; y)<br>        <span class="hljs-keyword">return</span> x;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> y;<br>&#125;<br><br><span class="hljs-type">int</span> n, m, ql, qr, ans, rans;<br><span class="hljs-type">int</span> a[<span class="hljs-number">50010</span>];<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SegmentTree</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span> M[<span class="hljs-number">200010</span>], L[<span class="hljs-number">200010</span>], R[<span class="hljs-number">200010</span>], S[<span class="hljs-number">200010</span>];<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pushUp</span><span class="hljs-params">(<span class="hljs-type">int</span> rt)</span></span><br><span class="hljs-function">    </span>&#123;<br>        S[rt] = S[rt &lt;&lt; <span class="hljs-number">1</span>] + S[rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>];<br>        L[rt] = <span class="hljs-built_in">max</span>(L[rt &lt;&lt; <span class="hljs-number">1</span>], S[rt &lt;&lt; <span class="hljs-number">1</span>] + L[rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>]);<br>        R[rt] = <span class="hljs-built_in">max</span>(R[rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>], S[rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>] + R[rt &lt;&lt; <span class="hljs-number">1</span>]);<br>        M[rt] = <span class="hljs-built_in">max</span>(M[rt &lt;&lt; <span class="hljs-number">1</span>], <span class="hljs-built_in">max</span>(M[rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>], R[rt &lt;&lt; <span class="hljs-number">1</span>] + L[rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>]));<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> rt, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (l == r)<br>        &#123;<br>            M[rt] = L[rt] = R[rt] = S[rt] = a[l];<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-type">int</span> m = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>            <span class="hljs-built_in">build</span>(rt &lt;&lt; <span class="hljs-number">1</span>, l, m);<br>            <span class="hljs-built_in">build</span>(rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, m + <span class="hljs-number">1</span>, r);<br>            <span class="hljs-built_in">pushUp</span>(rt);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> rt, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> m = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (l &gt;= ql &amp;&amp; r &lt;= qr)<br>        &#123;<br>            ans = <span class="hljs-built_in">max</span>(ans, <span class="hljs-built_in">max</span>(M[rt], rans + L[rt]));<br>            rans = <span class="hljs-built_in">max</span>(R[rt], rans + S[rt]);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (ql &lt;= m)<br>                <span class="hljs-built_in">query</span>(rt &lt;&lt; <span class="hljs-number">1</span>, l, m);<br>            <span class="hljs-keyword">if</span> (m &lt; qr)<br>                <span class="hljs-built_in">query</span>(rt &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, m + <span class="hljs-number">1</span>, r);<br>        &#125;<br>    &#125;<br>&#125;;<br><br>SegmentTree sgt;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <br>    <span class="hljs-built_in">read</span>(n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>    &#123;<br>        <span class="hljs-built_in">read</span>(a[i]);<br>    &#125;<br>    sgt.<span class="hljs-built_in">build</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">read</span>(m); m; --m)<br>    &#123;<br>        <span class="hljs-built_in">read</span>(ql); <span class="hljs-built_in">read</span>(qr);<br>        ans = rans = <span class="hljs-number">-0x7f7f7f7f</span>;<br>        sgt.<span class="hljs-built_in">query</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n);<br>        std::cout &lt;&lt; ans &lt;&lt; std::endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ICPC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Data Structure</tag>
      
      <tag>Segment Tree</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
